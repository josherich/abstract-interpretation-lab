// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Pervasives = require("bs-platform/lib/js/pervasives.js");
var AbstractDomain$AiProject = require("./abstractDomain.bs.js");

function string_of_aexpr(a) {
  switch (a.tag | 0) {
    case 0 : 
        return String(a[0]);
    case 1 : 
        return a[0];
    case 2 : 
        return "(" + (string_of_aexpr(a[0]) + (" - " + (string_of_aexpr(a[1]) + ")")));
    case 3 : 
        return "(" + (string_of_aexpr(a[0]) + (" + " + (string_of_aexpr(a[1]) + ")")));
    
  }
}

var print_aexpr = string_of_aexpr;

function string_of_bexpr(a) {
  switch (a.tag | 0) {
    case 0 : 
        return "(" + (string_of_aexpr(a[0]) + (" < " + (string_of_aexpr(a[1]) + ")")));
    case 1 : 
        return "(" + (string_of_aexpr(a[0]) + (" > " + (string_of_aexpr(a[1]) + ")")));
    case 2 : 
        return "(" + (string_of_aexpr(a[0]) + (" == " + (string_of_aexpr(a[1]) + ")")));
    case 3 : 
        return "(" + (string_of_aexpr(a[0]) + (" != " + (string_of_aexpr(a[1]) + ")")));
    case 4 : 
        return "(" + (string_of_bexpr(a[0]) + (" nand " + (string_of_bexpr(a[1]) + ")")));
    
  }
}

var print_bexpr = string_of_bexpr;

function print_node(s) {
  switch (s.tag | 0) {
    case 0 : 
        print_nodelist(s[0]);
        return Pervasives.print_newline(/* () */0);
    case 1 : 
        Pervasives.print_string(s[0] + " = ");
        string_of_aexpr(s[1]);
        return Pervasives.print_string("; ");
    case 2 : 
        return Pervasives.print_string("; ");
    case 3 : 
        Pervasives.print_string("(if ");
        string_of_bexpr(s[0]);
        Pervasives.print_string(" ");
        print_node(s[1]);
        return Pervasives.print_string(") ");
    case 4 : 
        Pervasives.print_string("(if ");
        string_of_bexpr(s[0]);
        Pervasives.print_string(" ");
        print_node(s[1]);
        Pervasives.print_string(" else ");
        print_node(s[2]);
        return Pervasives.print_string(") ");
    case 5 : 
        Pervasives.print_string("(while ");
        string_of_bexpr(s[0]);
        Pervasives.print_string(" ");
        print_node(s[1]);
        return Pervasives.print_string(") ");
    case 6 : 
        return Pervasives.print_string("break; ");
    case 7 : 
        Pervasives.print_string("{ ");
        print_nodelist(s[0]);
        return Pervasives.print_string("} ");
    
  }
}

function print_nodelist(sl) {
  if (sl) {
    var sl$prime = sl[1];
    var s = sl[0];
    if (sl$prime) {
      print_nodelist(sl$prime);
      return print_node(s);
    } else {
      return print_node(s);
    }
  } else {
    return /* () */0;
  }
}

function string_of_label(l) {
  return "l" + String(l);
}

function print_label(l) {
  return "l" + String(l) + ":";
}

function bool_to_string(b) {
  if (b) {
    return "tt";
  } else {
    return "ff";
  }
}

function print_space(_m) {
  while(true) {
    var m = _m;
    if (m > 0) {
      Pervasives.print_string(" ");
      _m = m - 1 | 0;
      continue ;
    } else {
      return 0;
    }
  };
}

function print_margin(m) {
  return print_space((20 + m | 0) + 1 | 0);
}

function print_labelling(param, m) {
  var s = "<" + ("l" + String(param[0]) + (", " + ("l" + String(param[2]) + (", " + ((
              param[4] ? "tt" : "ff"
            ) + (", " + ("l" + String(param[5]) + ">")))))));
  Pervasives.print_string(s);
  if (s.length < 20) {
    print_space((20 - s.length | 0) + 1 | 0);
  }
  return print_space(m);
}

function print_at(param) {
  return "l" + String(param[0]) + ":";
}

function print_after(param) {
  return "l" + String(param[2]) + ":";
}

function print_labelled_node_trace(s, m) {
  switch (s.tag | 0) {
    case 0 : 
        var ls = s[1];
        print_labelling(ls, m);
        Pervasives.print_string("Prog:\n");
        print_labelled_nodelist_trace(s[0], m + 3 | 0);
        print_margin(m);
        print_after(ls);
        return Pervasives.print_newline(/* () */0);
    case 1 : 
        var ls$1 = s[2];
        print_labelling(ls$1, m);
        print_at(ls$1);
        Pervasives.print_string(s[0] + " = ");
        string_of_aexpr(s[1]);
        return Pervasives.print_string("; ");
    case 2 : 
        var ls$2 = s[0];
        print_labelling(ls$2, m);
        print_at(ls$2);
        return Pervasives.print_string("; ");
    case 3 : 
        var ls$3 = s[2];
        print_labelling(ls$3, m);
        Pervasives.print_string("(if ");
        print_at(ls$3);
        string_of_bexpr(s[0]);
        Pervasives.print_newline(/* () */0);
        print_labelled_node_trace(s[1], m + 3 | 0);
        return Pervasives.print_string(") ");
    case 4 : 
        var ls$4 = s[3];
        print_labelling(ls$4, m);
        Pervasives.print_string("(if ");
        print_at(ls$4);
        string_of_bexpr(s[0]);
        Pervasives.print_newline(/* () */0);
        print_labelled_node_trace(s[1], m + 3 | 0);
        Pervasives.print_newline(/* () */0);
        print_margin(m);
        Pervasives.print_string(" else ");
        Pervasives.print_newline(/* () */0);
        print_labelled_node_trace(s[2], m + 3 | 0);
        return Pervasives.print_string(") ");
    case 5 : 
        var ls$5 = s[2];
        print_labelling(ls$5, m);
        Pervasives.print_string("(while ");
        print_at(ls$5);
        string_of_bexpr(s[0]);
        Pervasives.print_newline(/* () */0);
        print_labelled_node_trace(s[1], m + 3 | 0);
        return Pervasives.print_string(") ");
    case 6 : 
        var ls$6 = s[0];
        print_labelling(ls$6, m);
        print_at(ls$6);
        return Pervasives.print_string("break; ");
    case 7 : 
        print_labelling(s[1], m);
        Pervasives.print_string("Stmtlist: {");
        Pervasives.print_newline(/* () */0);
        print_labelled_nodelist_trace(s[0], m + 3 | 0);
        print_margin(m);
        return Pervasives.print_string("} ");
    
  }
}

function print_labelled_nodelist_trace(sl, m) {
  if (sl) {
    var sl$prime = sl[1];
    var s = sl[0];
    if (sl$prime) {
      print_labelled_nodelist_trace(sl$prime, m);
      print_labelled_node_trace(s, m);
      return Pervasives.print_newline(/* () */0);
    } else {
      print_labelled_node_trace(s, m);
      return Pervasives.print_newline(/* () */0);
    }
  } else {
    return /* () */0;
  }
}

function print_parity(param, vl) {
  return " [" + (AbstractDomain$AiProject.stringofaP(param[1], vl) + "] ");
}

function print_parity_after(param, vl) {
  return " [" + (AbstractDomain$AiProject.stringofaP(param[3], vl) + "] ");
}

function print_vars(_vs) {
  while(true) {
    var vs = _vs;
    if (vs) {
      var vs$1 = vs[1];
      var v = vs[0];
      if (vs$1) {
        Pervasives.print_string(v);
        _vs = vs$1;
        continue ;
      } else {
        return Pervasives.print_string(v);
      }
    } else {
      return /* () */0;
    }
  };
}

function print_labelled_node_debug(s, m) {
  if (s.tag === 5) {
    Pervasives.print_string("debug: while ");
    print_at(s[2]);
    string_of_bexpr(s[0]);
    return Pervasives.print_newline(/* () */0);
  } else {
    return /* () */0;
  }
}

function print_labelled_node(s, m, vl) {
  switch (s.tag | 0) {
    case 0 : 
        var ls = s[1];
        return "\n" + (print_labelled_nodelist(s[0], m + 3 | 0, vl) + (print_after(ls) + (print_parity_after(ls, vl) + "\n")));
    case 1 : 
        var ls$1 = s[2];
        return print_at(ls$1) + (print_parity(ls$1, vl) + (s[0] + (" = " + (string_of_aexpr(s[1]) + "; "))));
    case 2 : 
        var ls$2 = s[0];
        return print_at(ls$2) + (print_parity(ls$2, vl) + ";");
    case 3 : 
        var ls$3 = s[2];
        return "if " + (print_at(ls$3) + (print_parity(ls$3, vl) + (string_of_bexpr(s[0]) + ("\n" + print_labelled_node(s[1], m + 3 | 0, vl)))));
    case 4 : 
        var ls$4 = s[3];
        return "if " + (print_at(ls$4) + (print_parity(ls$4, vl) + (string_of_bexpr(s[0]) + ("\n" + (print_labelled_node(s[1], m + 3 | 0, vl) + ("\n else \n" + print_labelled_node(s[2], m + 3 | 0, vl)))))));
    case 5 : 
        var ls$5 = s[2];
        return "while " + (print_at(ls$5) + (string_of_bexpr(s[0]) + (print_parity(ls$5, vl) + ("\n" + print_labelled_node(s[1], m + 3 | 0, vl)))));
    case 6 : 
        var ls$6 = s[0];
        return print_at(ls$6) + (print_parity(ls$6, vl) + "break; ");
    case 7 : 
        return "{\n" + (print_labelled_nodelist(s[0], m + 3 | 0, vl) + "}");
    
  }
}

function print_labelled_nodelist(sl, m, vl) {
  if (sl) {
    var sl$prime = sl[1];
    var s = sl[0];
    if (sl$prime) {
      return print_labelled_nodelist(sl$prime, m, vl) + (print_labelled_node(s, m, vl) + "\n");
    } else {
      return print_labelled_node(s, m, vl) + "\n";
    }
  } else {
    return "";
  }
}

var labelmargin = 20;

exports.string_of_aexpr = string_of_aexpr;
exports.print_aexpr = print_aexpr;
exports.string_of_bexpr = string_of_bexpr;
exports.print_bexpr = print_bexpr;
exports.print_node = print_node;
exports.print_nodelist = print_nodelist;
exports.string_of_label = string_of_label;
exports.print_label = print_label;
exports.bool_to_string = bool_to_string;
exports.labelmargin = labelmargin;
exports.print_space = print_space;
exports.print_margin = print_margin;
exports.print_labelling = print_labelling;
exports.print_at = print_at;
exports.print_after = print_after;
exports.print_labelled_node_trace = print_labelled_node_trace;
exports.print_labelled_nodelist_trace = print_labelled_nodelist_trace;
exports.print_parity = print_parity;
exports.print_parity_after = print_parity_after;
exports.print_vars = print_vars;
exports.print_labelled_node_debug = print_labelled_node_debug;
exports.print_labelled_node = print_labelled_node;
exports.print_labelled_nodelist = print_labelled_nodelist;
/* No side effect */
