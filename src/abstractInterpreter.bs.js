// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var AbstractDomain$AiProject = require("./abstractDomain.bs.js");
var AbstractSyntax$AiProject = require("./abstractSyntax.bs.js");

function lfp(_a, f, leq) {
  while(true) {
    var a = _a;
    var fa = Curry._1(f, a);
    if (Curry._2(leq, fa, a)) {
      return fa;
    } else {
      _a = fa;
      continue ;
    }
  };
}

function leq(x, y) {
  if (x.tag === 5 && y.tag === 5) {
    var match = y[2];
    var match$1 = x[2];
    if (AbstractDomain$AiProject.leq(match$1[1], match[1]) && AbstractDomain$AiProject.leq(match$1[3], match[3])) {
      return AbstractDomain$AiProject.leq(match$1[6], match[6]);
    } else {
      return false;
    }
  } else {
    return Pervasives.failwith("abstractInterpreter: incorrect leq argument");
  }
}

function fWhile(r0, vl, x) {
  if (x.tag === 5) {
    var match = x[2];
    var b = x[0];
    var sb$prime = abstractInterpreter(x[1], AbstractDomain$AiProject.test(b, match[1]), vl);
    var afP$prime = AbstractSyntax$AiProject.property_after(sb$prime);
    var brP$prime = AbstractSyntax$AiProject.property_break(sb$prime);
    var atP = function (param) {
      return AbstractDomain$AiProject.join(r0, afP$prime, param);
    };
    var partial_arg = AbstractDomain$AiProject.nottest(b, atP);
    var afP = function (param) {
      return AbstractDomain$AiProject.join(partial_arg, brP$prime, param);
    };
    return /* While */Block.__(5, [
              b,
              sb$prime,
              /* tuple */[
                match[0],
                atP,
                match[2],
                afP,
                match[4],
                match[5],
                (function (param) {
                    return AbstractDomain$AiProject.bot(/* () */0, param);
                  })
              ]
            ]);
  } else {
    return Pervasives.failwith("abstractInterpreter: incorrect fWhile argument");
  }
}

function abstractInterpreter(s, r0, vl) {
  switch (s.tag | 0) {
    case 0 : 
        var match = s[1];
        var match$1 = abstractInterpreterStmtlist(s[0], r0, vl);
        return /* Prog */Block.__(0, [
                  match$1[0],
                  /* tuple */[
                    match[0],
                    match$1[1],
                    match[2],
                    match$1[2],
                    match[4],
                    match[5],
                    (function (param) {
                        return AbstractDomain$AiProject.bot(/* () */0, param);
                      })
                  ]
                ]);
    case 1 : 
        var match$2 = s[2];
        var a = s[1];
        var v = s[0];
        var afP$prime = function (param) {
          return AbstractDomain$AiProject.assign(v, a, r0, param);
        };
        return /* Assign */Block.__(1, [
                  v,
                  a,
                  /* tuple */[
                    match$2[0],
                    r0,
                    match$2[2],
                    afP$prime,
                    match$2[4],
                    match$2[5],
                    (function (param) {
                        return AbstractDomain$AiProject.bot(/* () */0, param);
                      })
                  ]
                ]);
    case 2 : 
        var match$3 = s[0];
        return /* Emptystmt */Block.__(2, [/* tuple */[
                    match$3[0],
                    r0,
                    match$3[2],
                    r0,
                    match$3[4],
                    match$3[5],
                    (function (param) {
                        return AbstractDomain$AiProject.bot(/* () */0, param);
                      })
                  ]]);
    case 3 : 
        var match$4 = s[2];
        var b = s[0];
        var st$prime = abstractInterpreter(s[1], AbstractDomain$AiProject.test(b, r0), vl);
        var afP$prime$1 = AbstractSyntax$AiProject.property_after(st$prime);
        var brP$prime = AbstractSyntax$AiProject.property_break(st$prime);
        var partial_arg = AbstractDomain$AiProject.nottest(b, r0);
        var afP$prime$prime = function (param) {
          return AbstractDomain$AiProject.join(afP$prime$1, partial_arg, param);
        };
        return /* If */Block.__(3, [
                  b,
                  st$prime,
                  /* tuple */[
                    match$4[0],
                    r0,
                    match$4[2],
                    afP$prime$prime,
                    match$4[4],
                    match$4[5],
                    brP$prime
                  ]
                ]);
    case 4 : 
        var match$5 = s[3];
        var b$1 = s[0];
        var st$prime$1 = abstractInterpreter(s[1], AbstractDomain$AiProject.test(b$1, r0), vl);
        var se$prime = abstractInterpreter(s[2], AbstractDomain$AiProject.nottest(b$1, r0), vl);
        var afP$prime$2 = AbstractSyntax$AiProject.property_after(st$prime$1);
        var brP$prime$1 = AbstractSyntax$AiProject.property_break(st$prime$1);
        var afP$prime$prime$1 = AbstractSyntax$AiProject.property_after(se$prime);
        var brP$prime$prime = AbstractSyntax$AiProject.property_break(se$prime);
        var afP$prime$prime$prime = function (param) {
          return AbstractDomain$AiProject.join(afP$prime$2, afP$prime$prime$1, param);
        };
        var brP$prime$prime$prime = function (param) {
          return AbstractDomain$AiProject.join(brP$prime$1, brP$prime$prime, param);
        };
        return /* Ifelse */Block.__(4, [
                  b$1,
                  st$prime$1,
                  se$prime,
                  /* tuple */[
                    match$5[0],
                    r0,
                    match$5[2],
                    afP$prime$prime$prime,
                    match$5[4],
                    match$5[5],
                    brP$prime$prime$prime
                  ]
                ]);
    case 5 : 
        var match$6 = s[2];
        var wbot_000 = s[0];
        var wbot_001 = s[1];
        var wbot_002 = /* tuple */[
          match$6[0],
          (function (param) {
              return AbstractDomain$AiProject.bot(/* () */0, param);
            }),
          match$6[2],
          (function (param) {
              return AbstractDomain$AiProject.bot(/* () */0, param);
            }),
          match$6[4],
          match$6[5],
          (function (param) {
              return AbstractDomain$AiProject.bot(/* () */0, param);
            })
        ];
        var wbot = /* While */Block.__(5, [
            wbot_000,
            wbot_001,
            wbot_002
          ]);
        var fp = lfp(wbot, (function (param) {
                return fWhile(r0, vl, param);
              }), leq);
        if (fp.tag === 5) {
          var match$7 = fp[2];
          var atP = match$7[1];
          var b$2 = fp[0];
          var sb$prime = abstractInterpreter(fp[1], AbstractDomain$AiProject.test(b$2, atP), vl);
          return /* While */Block.__(5, [
                    b$2,
                    sb$prime,
                    /* tuple */[
                      match$7[0],
                      atP,
                      match$7[2],
                      match$7[3],
                      match$7[4],
                      match$7[5],
                      match$7[6]
                    ]
                  ]);
        } else {
          return Pervasives.failwith("abstractInterpreter: incorrect while transformer");
        }
    case 6 : 
        var match$8 = s[0];
        return /* Break */Block.__(6, [/* tuple */[
                    match$8[0],
                    r0,
                    match$8[2],
                    (function (param) {
                        return AbstractDomain$AiProject.bot(/* () */0, param);
                      }),
                    match$8[4],
                    match$8[5],
                    r0
                  ]]);
    case 7 : 
        var match$9 = s[1];
        var match$10 = abstractInterpreterStmtlist(s[0], r0, vl);
        return /* Stmtlist */Block.__(7, [
                  match$10[0],
                  /* tuple */[
                    match$9[0],
                    match$10[1],
                    match$9[2],
                    match$10[2],
                    match$9[4],
                    match$9[5],
                    match$10[3]
                  ]
                ]);
    
  }
}

function abstractInterpreterStmtlist(sl, r0, vl) {
  if (sl) {
    var sl$prime = sl[1];
    var s = sl[0];
    if (sl$prime) {
      var match = abstractInterpreterStmtlist(sl$prime, r0, vl);
      var brP$prime$prime = match[3];
      var s$prime = abstractInterpreter(s, match[2], vl);
      var partial_arg = AbstractSyntax$AiProject.property_break(s$prime);
      var brP = function (param) {
        return AbstractDomain$AiProject.join(partial_arg, brP$prime$prime, param);
      };
      return /* tuple */[
              /* :: */[
                s$prime,
                match[0]
              ],
              match[1],
              AbstractSyntax$AiProject.property_after(s$prime),
              brP
            ];
    } else {
      var s$prime$1 = abstractInterpreter(s, r0, vl);
      return /* tuple */[
              /* :: */[
                s$prime$1,
                /* [] */0
              ],
              AbstractSyntax$AiProject.property_at(s$prime$1),
              AbstractSyntax$AiProject.property_after(s$prime$1),
              AbstractSyntax$AiProject.property_break(s$prime$1)
            ];
    }
  } else {
    return /* tuple */[
            /* [] */0,
            r0,
            r0,
            (function (param) {
                return AbstractDomain$AiProject.bot(/* () */0, param);
              })
          ];
  }
}

exports.lfp = lfp;
exports.leq = leq;
exports.fWhile = fWhile;
exports.abstractInterpreter = abstractInterpreter;
exports.abstractInterpreterStmtlist = abstractInterpreterStmtlist;
/* No side effect */
